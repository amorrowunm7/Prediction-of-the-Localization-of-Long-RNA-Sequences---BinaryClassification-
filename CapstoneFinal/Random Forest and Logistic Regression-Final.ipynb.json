{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "import os\n",
    "import itertools\n",
    "from sklearn.preprocessing import MinMaxScaler, RobustScaler\n",
    "from sklearn.decomposition import SparsePCA,PCA\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.feature_selection import SelectKBest,chi2\n",
    "from sklearn.feature_selection import VarianceThreshold\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn import preprocessing\n",
    "from sklearn.ensemble import ExtraTreesClassifier, RandomForestClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "\n",
    "import matplotlib.pyplot as plt \n",
    "plt.rc(\"font\", size=14)\n",
    "import seaborn as sns\n",
    "sns.set(style=\"white\")\n",
    "sns.set(style=\"whitegrid\", color_codes=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('./4mer&8merCounts4.csv',index_col=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# convert the classes to 0 and 1\n",
    "df['class'] = pd.factorize(df['class'])[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Sample to train , test and validation data\n",
    "X=df.drop(columns=['class'])\n",
    "y=df.loc[:,'class']\n",
    "X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=15)\n",
    "X_train, X_valid, y_train, y_valid = train_test_split(X_train,y_train,test_size=0.15, random_state=15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import MinMaxScaler, RobustScaler\n",
    "from sklearn.decomposition import SparsePCA,PCA\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.feature_selection import SelectKBest,chi2\n",
    "from sklearn.feature_selection import VarianceThreshold"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Classes look even"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x=y,data=df,palette='hls')\n",
    "plt.show()\n",
    "plt.savefig('count_plot')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import ExtraTreesClassifier, RandomForestClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import accuracy_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/amandam1/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:246: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.6526255049047894"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf = RandomForestClassifier()\n",
    "clf.fit(X_train,y_train)\n",
    "pred = clf.predict(X_test)\n",
    "accuracy_score(pred,y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Logistic Regression Assumptions\n",
    "Binary logistic regression requires the dependent variable to be binary.\n",
    "For a binary regression, the factor level 1 of the dependent variable should represent the desired outcome.\n",
    "Only the meaningful variables should be included.\n",
    "The independent variables should be independent of each other. That is, the model should have little or no multicollinearity.\n",
    "The independent variables are linearly related to the log odds.\n",
    "Logistic regression requires quite large sample sizes.\n",
    "\n",
    "Assumptions made by Logistic Regression\n",
    "\n",
    "The dependent variable must be categorical\n",
    "The independent variables(features) must be independent (to avoid multicollinearity)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/amandam1/anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.6520484708597807"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf = LogisticRegression()\n",
    "clf.fit(X_train,y_train)\n",
    "pred = clf.predict(X_test)\n",
    "accuracy_score(pred,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from matplotlib import pyplot as plt\n",
    "#plt.style.use('dark_background')\n",
    "from sklearn.datasets import load_breast_cancer\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.metrics import roc_curve\n",
    "from sklearn.metrics import auc\n",
    "from sklearn.metrics import precision_recall_curve\n",
    "from sklearn.metrics import precision_score\n",
    "from sklearn.metrics import recall_score\n",
    "from sklearn.metrics import f1_score\n",
    "from sklearn.metrics import average_precision_score\n",
    "from inspect import signature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/amandam1/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:246: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n",
       "            max_depth=None, max_features='auto', max_leaf_nodes=None,\n",
       "            min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "            min_samples_leaf=1, min_samples_split=2,\n",
       "            min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=None,\n",
       "            oob_score=False, random_state=None, verbose=0,\n",
       "            warm_start=False)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf = RandomForestClassifier()\n",
    "rf.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "probs = rf.predict_proba(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "malignant_probs = probs[:,1]\n",
    "fpr, tpr, thresholds = roc_curve(y_test, malignant_probs)\n",
    "roc_auc = auc(fpr, tpr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZEAAAEcCAYAAAAGD4lRAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMi4zLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvIxREBQAAIABJREFUeJzs3Xd8FHX++PFXkk3vjfSEkvChCUhR7J69nujXsyJn7/q75nnneain5+mp11TsvWDFcohdzzs98ZQi0j4QSEjvvW2d3x+zQMRAFtjdSbLv5+PBg83s7Mx7J5t9z6fMe8IMw0AIIYTYG+FWByCEEGL4kiQihBBir0kSEUIIsdckiQghhNhrkkSEEELsNUkiQggh9pokERFUSqmblFKPWx3HUKGUKlRKdSmlIizY95FKqapg7zdQvMdx7F68Tj6T+yBMrhMZXpRS5UAW4Aa6gPeAa7XWXd7nnwbOAxz9XnaJ1vrlAbZlAD2AAbQDLwM3aK3dgXsHwaWUOgVYAEwG+jCP141aa0u+PL2/v0u11h8FaX8HALcCBwMeoBR4SGv9lFLqSOB5rXV+MGLZFaXUaKAMiNRauwK8ryMZAu95JJGWyPB0qtY6AZgO7A/8dqfn/6y1Tuj37wcJpJ9p3m0dAZwNXByYkANroDN5pdSZwIvA34AMzERiBz5XSqUGIAabv7e5L5RSBwGfAJ8BxUA6cBVwYgD2Zdl7H2rHPdTIwR/GtNZ1Sqn3MZPJvm6rVCn1Rf9tKaWSgb8AJ2GexT4F3LKtpaKUugz4BZAPVALztNYrlFK5wP3A4Zitpb9qrf/hfc2tQLHWep5S6l3gHa31A/32+S1wm9Z6sVJqgnc7M4FG4Pda61e86z0N9AJFmAnwNOCjftsJA+4D7tBav+hd3KuUuhRYDfwcWKCUuhC4DFgJXADUAtdorT8e7Bj0e+3/gPnAQ0qpp4DHgGmYLbz3vdtrU0o9BxQC/1RKuYE/AK/Q7yxcKfUv4D/AUcBU4EvgPK11kzee+cDtQAJmcryEXbds7gGe0Vrf3W/ZcuCs/isppX4J3IjZur1Ja/2Ud/nJwB3AOMyW6hNa61u9z432xn0pcAtQDhyulHoVOAyIBb4FrtJar/W+Jta7vTOBFOA74Fjg395Q2pRSAMdqrb9USl0M3ABke4/x5Vrrrd5tGcC1wM8wv8fGeJeVeD/LJwH3AgVAB/BX4CHgXSBaKdXl3ed44HK8n0nvtg8F/gxMAjoxP3dPD3B8BdISGdaUUvmYZ5WlftjWBMw//v7behpwYZ7F7g8ch/mlgVLqJ5jdJPOBJODHQLNSKhz4J+YXSB5wNPAzpdTxA+x2EXBuvxgmYSaFd5RS8cCHmC2JUcA5wELvOtucB/wRSAQ+3/ktYX5hv9p/odbaA7yO+eW1zYHAZszWyi3AYqVU2mDHoN9rt2B2Mf4RCAP+BOQCEzG/xG717vsCoAJvS1Jr/ecBjsm293WR931HAb/qd3wWAucDOUAy5jH+AaVUHHAQ8Nou9rFNdr/tXAI82K+V1o35+00BTgauUkrN3en1R3jf57bf77tAiTf2FcAL/da9F/OE4GAgDfg1ZmI+3Pt8ive4fKmUOg24CTgDyMRMrIt22vdczOM/iR96ArhCa50ITAE+0Vp3Y/691PRrpdf0f5FSqsj7Hu737nc6sGqA7QsvaYkMT296z7oSMLsrbtnp+V8ppa71PnZprTN2s60V3q6gOOAlzC8plFJZmGffKVrrXqBbKfVXzLO2RzC/SP+stf7au51S7+sOBDK11n/wLt+ilHoMMwm8v9O+38A8ey/ynmGeDyzWWtu9X1bl286KgZVKqdeBnwC3eZe9pbX+wvu4b6dtb3vPtQO859p+zwM0AH/TWhvAy94z85OVUh8McgzA/EK63/vY5T0O2xJxo1LqL/zw9zOYp7TWGwGUUq9gJmgwz+D/qbX+3PvcAuD6XWwjFfMkcaD3358T+IN3LGKp9wxdAcu01v/qt95qpdQizKTxZr/lt3q/nAHQWj+57bG31dnqbc11YnaVztFaV3tX+a93vYHiuhL4k9Z6vXedO4Gb+n1W8D7fspv3NUkp9a3WuhVoHeQ4bHMe8JHWelvCavb+E7sgSWR4mqu1/kgpdQTmmXoG0Nbv+Xu11jf7uK0ZmGfhPwHuAuIxxw2KgEigtt8feThmtxWYZ9ibB9heEZCrlOofTwTmmeT3aK07lVLvYCaYuzFbJZf1286BO23HBjzX7+dKdq3J+38OZrdLfzn9ngeo9iaQbbZitiQGOwY/iMGbfP+O2apL9K7v6xfYNnX9HvdgnizgjWn7/rTWPUqpXX3BtWKe5ecAG3azr+adBrO37897QnAX5pl8FBDNTi27/vF4T0b+iPlZyvTuH8zPZzQQw8CfmYEUAX9XSt3Xb1kYZotpWxLZ3e///4CbgbuUUquB32itv/Rhv7v6XItdkCQyjGmtP/OODdyL2bTf2+0YwCveLoQFmP3MlZjJJGMXM2YqMfvKB1peprUu8XH3i4BblFL/xvyS+bTfdj7TWh+7y1eaYw67ooEqzC+07d1G3u62/+P7Z9N5SqmwfomkEHibwY/BQDHc6V22n9a6xduiemA36++JWsxWArB9jCF9oBW9CeZLzPf66UDr+OBFzNhP1Fr3KaW2TVDor//7OQ9zbOoYzDGSZMxkFoaZtPswPzPf7mYb21QCf9RavzDAc7t7HQDeFvJpSqlIzLGTVzATxGDHvxI4YJB1RD+SRIa/vwHlSqlpWuud/zj31F3AMqXUXVrrWm93zn1Kqd9jDpCPAfK11p8BjwN/UUp9jtn3PQ6zC+F/QKdS6kbgH5hTjScCsf26vvpbCjyJOcj8snfMAmAJ5lnkBZjdbGD2T3dt6+LYHa21oZT6FfCY91qIxZh9+3dijuH8td/qo4DrlVILMZPxRGCp1rp5kGMwkETMQeh2pVQe5sBwf/XAHl/L4PUa5u/nYOAbzLGWsN2s/2vgA6XUVuBJ7/uZBvxWa32OD/tLBFq8CeQAzCTxwSDr2zG7f+IwjzVgjkUppZ7E/MxcgHkcDsD87DRitlrGAhu9L3kYuF0ptUprvdbbJXac1nrnltAPKKWiME8elmit25VSHexoFdUD6UqpZK11+wAvfwGz2+wszM9MMlCgtZZxkV2QgfVhTmvdCDyL2YLY1219hzlTZtsX33zMbox1mGeUr2F2j+D9Y/4j5tlqJ+aZfZp35tYpmF/4ZZhnoI9j/jEOtE875h/rMd5tbVveiTmIfQ5Qg9nFczdmt4iv7+dlzBlXP8f8YluHOWvoEK11/26grzAHg5u87+nMfs/v8hjswm2YXYTtwDve99bfn4CblVJt3iTnM+8sp+swk2otZlJrwPziHmj9/2LO8joKc2yqBXgUM3H74mrgD0qpTszP1yuDrP8sZldTNebxWrbT87/CnJH1NdCC+fsM11r3YB73L7zHZY7W+g3v8y95k8Aa9mxq8gWYJ1cdmOMr5wNorTdgtn63ePeV2/9FWusKzHGwX3pjXIU5007sglxsKEKad5rupVrrQ62OZU8ppRIwx8JKtNY7j/sIERTSnSXEMKKUOhX4GLMb617MM/tyK2MSoS0oSUQpdS/mAN9ozAHHNQOsE4HZh34C5uDXXVprqWcjxPedhjlDLQxzXOScnWaWCRFUQenO8l4BuhVzmucpu0gi8zH7LU/EnHGyEjhUa10e8ACFEELslaAMrGutP9da725ON5h1mx7TWnu8g8VvYs6wEEIIMUQNpTGRQnZcRARmeYgCX1+8fPnyaGA25qyVEVOFVgghAiwCc8bh1zNnzhxwpt/uDKUksq9mM8BV0UIIIXxyGD+sQTeooZREKjBLHWy7IG3nlslgagHGjx9PVFSUn0MbftasWcOUKVOsDmNIkGOxgxyLHUbKsfC4XfR1N9DbVUtPZzW9nbU4eneUFIuKTSM2MYe4hFyi49Jw1ncSNyqP6LQMHC0tuMLC2FJdDYPXWRvQUEoirwKXKaUWYw6sz8XMjL5yA0RFRREd7fP1aCOaHIcd5FjsIMdih+F2LAzDQ193Iz3tlXR3VNDdXklvZy2GYfbg26ISiU8uJCNnMvHJBcQlFWCLjAXAbbdT8eJL1Ly9hKyjj6L42quIzsnBbreDmUT2ahggWFN8/4FZ0jkb+Egp1ay1nqyUWgos0Fp/gzlt8UBgk/dlf5ALqIQQocowDJz2drrbK+lur6Snw/zf4zaHLcIjoolPLmBU0eHEJxcQn1xAZHQyYWE/rITT/t0aSh94iL66OrKOP47RP53ntziDkkS01tczQMlqrfVJ/R67Me+6JoQQIcfjdtDdXkV3ezldbRX0dFTitHcAEBYWQWxiDum5M4hPKiQuuYCY+EzCwgafYFv/8SeU/uNBYrKzmXLHbSTv598uvKHUnSWEECHD0ddGV1s53W1b6WrbSk9nNRhmncjouEwS04qJTy4kPqmA2MQcwiMi92j77t5eImJjSZs9i/yzziT/zDOICED3nSQRIYQIMMPjpqezpl/SKMdpN4sIh4VHEp9cSPboI0lIGU18ciG2qPi93pezvZ0tjz9JX00tU//8JyKTkig6/9zBX7iXJIkIIYSfuRzddLVt9XZNbaW7vRLD4wQgKiaFhNQxJKQUEZ8ymriEHMLCI/Z5n4Zh0PTvz9ny2BO4e3spOOtMDMPY7b0C/EGSiBBC7ANzxlSDmSzazKRh72k0nwwLJy4xj8z8Od6kUURUTIrfY3B2dLLp7/fT+s1yEsaXUHLd1cQVFvp9PwORJCKEEHvA7eqju71i+1hGd/tW3K4+AGyR8cSnFJGRN5v4lCLikwr2eCxjb0TERONobWPMJReRc/KJhEXse8vGV5JEhBBiFwzDwNHbsmMso72c3s46zELjYcQkZJGaPY2E5NHEpxQRHZcx4BTbQOitraVy0SuMvfJybHGxTLv3LsLCg3+fQUkiQgjRj72nmfbG9XS2bqarrRyXowvwXpeRUkjO2KOJ3zYA7r2QL5gMt5uat5dQ8eJLhEXayN56PEkTJ1iSQECSiBAixBkeN13tW2lvXE974zr6uhsAs1xIUvp4c8ZUShGxCdk+XZcRSN3l5ZTev5Cu0s2kHTibsVdcTnR6mqUxSRIRQoQcl7MX7BWUfadpb9K4nT0QFk5i6lgy8ueQnDmRmLgMq8P8gfKnnsXe2Ii64RekH3Jw0LrOdkeSiBAiJPR1N9LeuM7sqmorA8NDuz2O5IwJpGROIil9PBEWdE8NplNvJCojnej0dIqvvZrw6GgikxKtDms7SSJCiBHJ8LjpaiunzZs4tk27jUnIJnv0EdQ1RzDtwGMt76LaFXdfH1ufX0TtknfIOuZos2Bi5tBrHUkSEUKMGC5nD+1NG2hvXE9Hk8bt6iUsLILEtHGMKjyE5IyJRMeZYwh1HcuHbAJpW/UtpQsfxl7fQPaJJ1A0/3yrQ9olSSJCiGHLMAz6uhu2D4p3tZUDBraoBFJGTSE5cyJJ6SVE2GKsDtVn9R99TOn9C4nJzWHKnbeTPHmS1SHtliQRIcSw4vG46Got2z6+Ye9tBiA2MYfssUeRkjGJuOT8IdvK2BVXTy+2uFjSDjiAgnOayDtjbkAKJvqbJBEhxJDncnTT3rTebHE0b8Tj6iMs3EZiWjFZow8nOXNSQMqJBIOjrY0tjz6Bvb7eWzAxkcJzz7Y6LJ9JEhFCDDmGYdDXVW8Oijeto7utArObKpG0rKkkZ04iMa2ECNvwvRW2YRg0fvZvyh5/EndvHwVn/yQoBRP9TZKIEGJI8HhcdLZs3j6+4ehrBSAuMY+csceQnDmRuKS8YddNNRBnRweb/vYPWpevJFEpiq+7mriCfKvD2iuSRIQQlnHaO72zqdbR0bwRj9tBWHgkSeklZI89iuSMiUTFJFsdpt9FxMbibO9gzKUXk3PSCUEtmOhvkkSEEEFjGAa9XbXbB8W72ysBg8joZNJyZpCSOYnEtOKgVL4Ntp6qaipfeplxV1+FLS6WqfdYUzDR3ySJCCECyuN20tlSSnvjetqa1uPsawMgLqmA3HHHkpw5idjE3CFRwiMQDLeb6jfeouKlVwiPiqKnooKkCWpEJBCQJCKECACnvYM279hGZ/MmPB4n4RFRJKWXkDzuWJIzJhAZnWR1mAHXtaWM0gcW0r15C+kHHcjYKy4jKjXV6rD8SpKIEGKfGYZBT2f19m6qno4qwLwVbHrebJIzJ5KYOm5EdlPtztZnnsPR3IK68VdkHHyQ1eEEhCQRIcRe8bgddDSXmomjaT1OewcQRnxyIbnFJ5CSOYmYhOwR2021Kx3rNxA9KtMsmHjdNYRHRxGZOHQKJvqbJBEhhM8cfW3eKbjr6WjZhOFxER4RTVKGIiVjIkkZE4iMTrA6TEu4e3vZ+tyL1C59d0fBxIx0q8MKOEkiQohdMgyDno5Kc1C8cR29nTWAecOmTO99NxJSxxIeHtpfJa0rV7F54cPYG5vIOekECucN3YKJ/hbav3khxIBczh6aa5bTVLXMe6e/MBJSRpNXchLJmZOIiR8Vct1Uu7KtYGJsXi773Xk7SZMmWh1SUEkSEUIA3lZHeyWNVV/SUrcKw+MiPrmQosk/ISVzMraoeKtDHFJcPT3Y4uLMgonnNpN/xlzCo4ZvGZa9JUlEiBDndvXRUruSxqpl9HbWEB4RRXruLDLz5xCXlGd1eEOOo7WVLY88Tl9DA9PuucssmHjOWVaHZRlJIkKEqJ7OGpoql9FcuwKP205sQjaFE08nLWfGsLr/RrAYhkHDJ59S/uQzuO32kE4c/UkSESKUGC6aa76hsXIZ3e1bCQu3kZo1jcyCOcQnF8k4xy4429vZ+Je/07bqW5ImTWTcNVcRly+tNJAkIkRI6OtuoLFqGbR+RXmLg+i4TPLVqaTnzsIWGWd1eENeRFwcrp4exl5xGdknHDdiSpb4gyQRIUYoj8dFW8Namiq/pLN1M4SFQ2Qe46eeRELqOGl1DKKnqoqKF1+m+NqrzYKJd98pyWMAkkSEGGHsPS00VX9FU/X/cDm6iIpJJbf4RDLyZrF6zSYS04qtDnFI87hcVL/xFpUvvUJETAy9lZUkqvGSQHZBkogQI4DhcdPetIHGqmV0NGkAkjMnkpl/EEkZ40fEjZyCoWvzFkrvX0h3WRnphxzE2MsvJSpleN52N1gkiQgxjDn62mmq/h9NVV/htLcTGZ1Eztijycg7gKjYkVUtNhi2Pvs8jrZWJvzm16QfdKDV4QwLQUsiSqnxwDNAOtAMzNdab9ppnVHAU0ABEAl8ClyvtXYFK04hhjrD8NDZUkpj5Ze0Na4Dw0NiegkFE04jJXMSYeHD9y55Vmhfu46YrCyiM8yCiREx0dgSQrP+194IZkvkYeBBrfXzSql5wCPAUTutcxOwXmt9slIqEvgcOAN4JYhxCjEkOR1dNFd/Q1PVMuy9zURExpFVdBgZ+XOIicuwOrxhx7Db2fzwY9S9+x5Zxx1D8TWhUTDR34KSRLwtjBnAsd5Fi4AHlFKZWuvGfqsaQKJSKhyIBqKA6mDEKMRQZBgGXW1lNFUuo7V+NYbhJiFlDLnFx5MyakrI3Z/DX1qXr8D+0GPUdXaSc+opFM071+qQhq1gtUQKgGqttRtAa+1WStV4l/dPIrcDrwO1QDzwgNb6iz3Z0Zo1a/wT8QiwfPlyq0MYMobdsfA4wF4O9lJwd0BYJESPhehiuiKS6arxQM3qvdr0sDsWfuZasQrXkqWEZaQTeeEFtBbk07p2rdVhDVtDbWD9J8Bq4GggEXhXKXWm1vo1XzcwZcoUoqOjAxXfsLF8+XJmzpxpdRhDwnA6Ft3bCiDWrsLwOIlLKiCz4HhSs6YTYdv34n7D6Vj4k2EYuHt6sMXH4xw/nrrkZOqLCph1oAye2+32fTr5DlYSqQTylFIR3lZIBJDrXd7fdcDFWmsP0K6Uegv4EeBzEhFiuHG77LTWraKxahk9HVWEh0eSnrM/GQUHEZ+Ub3V4w56jpZXNDz+KvanJLJiYmEjBWWfSEOItMn8JShLRWjcopVYB5wLPe/9fudN4CEAZcALwP6VUFHAMsDgYMQoRbL2dtTRWeQsguvqIScimYMJc0nNmEBEZa3V4w55hGDR8/AllTz6N4XRRcO7ZVoc0IgWzO+tK4Bml1AKgFZgPoJRaCizQWn8D/Ax4WCn1HRCBOcX3sSDGKERAedxOWutX01i1jO62cm8BxKlk5s8hPmW0lCLxE2d7O/q+v9H+7WqSJk+i+JqriM3LtTqsESloSURrvQH4QQek1vqkfo83s2MGlxAjRl93I01Vy2iq+Qa3s4fouAzyx59iFkCUmz35XURcHJ6+PsZeeTnZxx8rJUsCaKgNrAsxYhgeN20Na2ms+pLOllIICydl1BQy8+eQmDZOSpH4WU9FJRUvvkTx9ddgi4tjv7vvlJZdEEgSEcLPHL2tNFZtK4DYSVRMCrnFJ5CRN5vI6CSrwxtxPE4n1YvfpPKV14iIjaW3ssosmCgJJCgkiQjhB4bhoaNJ01j5Je1NGwBIzphARsEckjMmSKsjQDo3lVL6wEJ6yreScdghjL3sEiKTk60OK6RIEhFiHzjtHTRVf01T1TIcfW3YohLIHnMUGfkHEi0FEAOu4oVFuDo6mXDTb0g/cLbV4YQkSSJC7CGzAOJmGquW0dawxiyAmFZM/vhTSRk1WQogBlj7mrVmwcTMDLNgYnQ0tgSZnGAVSSJC+Mjl6DbvT161DHtPk1kAsfBQswBifKbV4Y14rp4etj7zHHXvfbCjYGJ6mtVhhbw9TiJKqVFa64ZABCPEUGMYBt1t5TRWeQsgelzEp4wmZ+wxpGZNlQKIQdLyzXI2L3wER2sruaedSuF551gdkvDyKYkopZKB+zFrW3mAeKXUqcAsrfUtAYxPCEu4nb00166gsWoZfV11hEdEk5F3AJn5c4hNzLE6vJBS98FHbH7wIeIKC5hw469IVOOtDkn042tL5CGgCxiPWSAR4CvgPkCSiBgxejqqaKxcRkvdSjxuB7GJeRROOpO07OlE2KSwZ7AYhoG7uwdbQjwZB8/B1dFB7mmnEh4pLb+hxtckcgyQr7V2KKUM2F4PKytwoQkRPB3NG6ne9B49HZWEhUeSljOdzPyDiEvKl+sNgsze3MyWhx/D3tjE1HvvwpaQQP6ZZ1gdltgFX5NIB5AG1G1boJQqAOoDEZQQweK0d1Cp/0lr3SqiYtMomHAaaTkzsUkBxKAzDIP6Dz+i/KlnMVwuCuedKwl8GPA1iTwJvKqUugkIV0rNBv6EeYtbIYYdw/DQWPkl1aXvYbid5Iw7luzRP5KBcos42trZeO9faP9uDcn7TWHcNVcRm5NtdVjCB74mkT8BduAJIAZ4ETOB/DVAcQkRMD0dVWxd9zo9HVUkppVQOPF0maJrMVt8HB6nk3HXXEnWscdIC2QY8TWJpGut78McSN9OKZUBNPk9KiECwO3qo6b0fRoqvsAWFc+Y/c4nNXuafGFZpHtrBRUvvkTJ/7vWLJh41x/ldzEM+ZpEtgADVY7biDlWIsTQZRi01n1LpX4bp72TzIKDyC0+QcY9LOJxOql6/Q2qXn2diLg4equqSRxfIglkmPI1ifzgt6uUSsC8ZkSIIcve0wSd/2bL6lpiE/MYN/1C4pMLrA4rZHVu3GQWTNxaQcbhhzH2souJTJLKxsPZbpOIUqoMMIBYpdSWnZ7OAF4PVGBC7AuPx0V9+WfUbvkIDChQp5FZcJDUtbJYxYsv4erqYuLNvyVt9iyrwxF+MFhL5FLMVsjbwGX9lhtAvdZ6baACE2JvdbaUsnXdYuw9jaRmTaXVPppRRYdaHVbIalv9HbE5OTsKJsbGYIuLszos4Se7TSJa648BlFLZWuuO4IQkxN5x2ruo2vhPWmpXEBWbRvGMS0jOmMDy5cutDi0kubq6KX/mWeo/+Iis44+l+OorpWDiCOTTmIjWukMpNQU4DLMbK6zfc38IUGxC+MQwPDRV/4/qjUvxuB1kjz2anDFHyzUfFmr+6mu2PPwojrY28s6YS8E5Z1kdkggQXwswXoJZgPFj4FjgQ+Bo4J+BC02IwfV01lCx7nW62ytISB1H0aQziIkfZXVYIa3u/Q/YvPAR4ooKmXDTjSSWFFsdkgggX2dn/QY4SWv9L6VUq9b6VKXUKYAUtBGWcLvs1Gz+gIaKz7HZYhk95RzScmbINFGLmAUTu7ElJJBxyMG4unvIPfVkKZgYAnxNIlla6395H3uUUuHAO8CzwMWBCEyIgRiGQVvDGio3vIXT3k5G/oHklZyELVIGaq1ib2xi88OP4mhu2VEw8Yy5VoclgsTXJFKllCrSWm8FNgEnY16p7gxYZELsxN7bQuX6N2lvWk9sQg5jp80jIWW01WGFLMPjof6Djyh/+lkMj4eieedJSzAE+ZpE7gOmAFuBO4BXgUjgFwGKS4jtDI+b+q3/pmbzh4SFhZE//hRGFR4q13xYyNHWhr7nL3SsWUvy1P0ovuZKYrKlYGIo8nV21hP9Hi9RSqUC0Vrr9oBFJgTQ2bqFinWL6euuJ2XUFAomnEZUTIrVYYU8W3w8eDwUX3c1o44+SlogISx8b16kte4DbEqpP/k5HiEAcDm6KV/zChu/fgiP28G4/S9i3PSfSgKxUHdZOev/eBeu7m7CIyOZcuftZB1ztCSQEDdoS0Qp9VNgOuZYyKNAPHAzcCXw34BGJ0KOYXhorvmGqo3v4Hb1kT3mR2SPOYYIW5TVoYUsj9NJ5SuvUf36G9gSEuitrpGCiWK7wWpn/Rm4ADNZnAvMAQ4ClgOHaa1XBTxCETJ6O+uoWL+YrrYyElLGUDjpDGITpJ/dSh0bNKX3L6S3qorMHx3JmIsvJDIp0eqwxBAyWEvkHOBwrfUmpdREYC1wrtb65cCHJkKF2+WgdstH1G/9jAhbDEWTzyI9dyZhYXvV2yr8qPLlV3H39TFpwe9InTnD6nDEEDRYEknRWm8C0FqvV0r1SAIR/tTWuI7K9W/i6GslPW82+SUnY4uKtzqskNb27Wpic3OIzsyk5LprCI+JwRYn914RAxssiYQppQrYUSvLtdPPaK0rAhWcGLkcfW1UbniSAMhpAAAgAElEQVSLtoY1xMRnMX72VSSmjrU6rJDm6uqm7Kmnafjok+0FE6PSUq0OSwxxgyWReKCc79+Uamu/xwYgk/WFzwyPm4aKz6nZ/AGGYZBXchKjig4jPNzXS5ZEIDQv+4rNDz+Gs72dvP87nYKzf2J1SGKYGOwvVwrfCL/paiunYt1iertqSc6YSMHEuUTHSmlwq9W99wGbH3qE+DGjmXTzb0koHmd1SGIYGex+Im5/7UgpNR54BkgHmoH528ZbdlrvLOD3mK0fAzhGa13vrzhE8LmcPVRvWkpT1VdERiczbvpPSc6cLFNELWQYBq7OLiKTEsk49BDcfX3knHIS4TZpEYo9E8xPzMPAg1rr55VS84BHgKP6r6CUmgXcChylta5TSiUD9iDGKPzIMAxaapdTpZfgcvWSVXQ4OeOOI8IWbXVoIc3e2EjpwkdwtrYy9d67sSXEkzf3x1aHJYapoCQRpdQoYAbmvUgAFgEPKKUytdaN/Vb9OXCv1roOQMqqDF+9XfVUrH+DrtbNxCcXUTLpDOISc60OK6QZHg+ur79hxZ//AsDo+ecTFi7TqMW+CVZLpACo3tY9prV2K6VqvMv7J5FJQJlS6t9AArAY+KPW2ghSnGIfedxOard8TH35vwiPiKJw0plk5M2Waz4s5mhrQ999L65160mZPo1xV19JTJbcvEvsO5+TiFLKBswG8rTWrymlYgG01r1+jCcCmIrZYokC3gMqMO9b4pM1a9b4MZzhLej3FnfUQvc34OmG6NG446ZTUW+jon5lcOMYQKjfZ91wu3F0dxN52in0Tt2PtVWVUFVpdViWC/XPhT/4envcycBb3h+zgdcwb497PmY5lMFUAnlKqQhvKyQCyPUu768CeE1rbQfsSqm3gAPYgyQyZcoUoqOlz3358uXMnDkzKPty9LVTpd+mtXk10XGZFE2aR2La0LklajCPxVDStaWMihcXMf7n/w9bfDzG7NmsWLEiJI/FQEL1c7Ezu92+TyffvvYxPATcobUuZseNqP4FHObLi7XWDcAqdiScc4GVO42HALwIHKeUClNKRWImqm99jFEEmeFx07D1c9Z+cQ9tjevILT6BSQf/YkglkFDkcTjY+twLfPvLX9O1aTO9NbUAMhtOBISv3Vn7YU7PBXPaLVrrLqXUntyT9ErgGaXUAqAVmA+glFoKLNBafwO8BMwC1gEe4H3giYE3J6zU3V5JxbrX6emsJildUTjxdKLj0q0OK+R1rN9A6f0P0ltdw6ijfsToi39KZKIUTBSB42sS2QrsD6zYtsA7HXezrzvSWm8ADhxg+Un9Hnsw75Yod0wcolzOXmpK36WxchmR0YmMnXoBKVn7yVnuEFH5ymt4HA4m3XIzqTP2tzocEQJ8TSILgHeUUguBKKXUDcA1wFUBi0wMKYZh0Fq3ikr9Ni5HN6MKDyG3+HgibDFWhxbyWlesJDY/j5hRoyi5/hrCo6VgoggeX2+P+7ZSqha4DPgCUMDZWuuvAhmcGBr6uhupWP8GnS2biEsqoGTGJcQl5VsdVshzdnZS/uTTNHzyL7KOP47iq68gKlUKJorg8nV2VqrW+mvg6wDHI4YQj9tJXdmn1JV9QlhEJAUTTiezYI5c8zEENP33S7Y88jjOjg7yzzxDCiYKy/janVWtlPoIeAF428/XhoghyN7bQumKJ+jrbiAte3/y1SlERidZHZYAat99ny0PP0r82DFMuuVmEsaOsTokEcJ8TSJjgLMxy5I8qpR6G3M67gf+LNIohoa+7gY2fvMoHreDkhmXkpShrA4p5JkFEzuJTEoi8/BDMZxOck4+kbAIuRODsJavYyL1wD+AfyilxgLnAfcCGUBW4MITwdbTWcOmbx6FsDDGz75S6l0NAX31DWxe+DCOtjam3fdnbPHx5P74FKvDEgLYu9pZyd5/iUC3f8MRVupqK6d0xZOE26IZP/NyYuIzrQ4ppBkeD7VL32Prcy8AMPqnF0jBRDHk+DqwPh7zKvPzMBPIq8A5Wuv/BjA2EUQdzaVsXvUUkdFJjJ95OVGxMsvHSo7WVjbcdQ+dGzQpM/Zn3FWXEzNKCiaKocfXlsjXwBvA9cBHMg4ysrQ1rGPL6ueIjstg/MzLZAB9CLAlJBAeGUnJz64j88gj5GJOMWT5mkSytNZ9AY1EWKKldhVlaxYRl5hHycxLsUXuSSUb4U9dm7dQ8cIixv/yZ9ji45l8+62SPMSQt8skopQ6V2u9yPvjWUoNPENHa+1zhV0xtDRWfUXFutdJSB1D8f4XydXnFnHb7VS+9ArVb75NZHISvTW1JJYUSwIRw8LuWiIXYt6BEMwr1QdisAdl2sXQUV/+GVUbl5CUMYFx0+YTHhFpdUghqX3tOkofeIi+mhpGHXM0Yy6ajy0hweqwhPDZLpOI1vr4fo99Kvkuhj7DMKjd8iG1mz8kNWsqo/c7l/DwYN3gUuys+vXFGG4Xk29bQMr0aVaHI8Qe82m+oFJqwHInSqll/g1HBJJhGFRtXELt5g9Jz53NmKnnSwKxQOvyFfQ1NABQfP217P+Pv0oCEcOWr98gE3axfLy/AhGBZRgeKta9TlP1/xhVeCj56lSpgRVkzo5Oyp54isZ/fUb2Cccx7qoriEpJsTosIfbJbpOIUupJ78Oofo+3GQ2sD0RQwr8Mj5uyNS/RWreK7LFHkzvueBm0DSLDMGj2Fkx0dXWRf9aZFJx1ptVhCeEXg7VEqnfx2ACWAy/7PSLhVx63ky2rn6e9cR15JSeRPeZHVocUcuree58tDz9G/LhxTP7DAuJHj7Y6JCH8ZrdJRGv9ezDHPrTW7wQnJOEvbpedzaueprNlM4UTTyez4GCrQwoZhmHg6uggMjmZzMMPw3C5yTnpBCmYKEac3V0ncojW+gvvj51KqcMHWk9r/e+ARCb2jcfBpuWP0t1RxegpZ5OeO9PqiEJGX10dpQsfwdm/YOKpJ1sdlhABsbuWyBPsGFB/YRfrGEChXyMS+8xp74KOT+jxdDJ26jxSs/azOqSQYLjd1L7zLluff5Gw8HCKfnqBtDzEiLe760Qm9HtcEJxwxL5y9LWx8ZtHwd1J8YyL5F4gQeJoaWX9n+6ma+MmUmfNZNyVlxOdmWF1WEIE3F5dJKCUOgxwSxXfoaWvp4lN3zyKy9ULSUdKAgkiW1IiETExjP/Fz8g4/FCZ/SZChq8XG/5LKXWo9/GvgMXA60qpGwMZnPBdb2cd+n8LcbvtqFlXQKTcCyTQOjeVsvbW23F1dRNuszH5D7eQecRhkkBESPG1JbIfsO3q9CuAI4FO4D/A3f4PS+yJ7vZKNq14nPBwG+NnXU1sQhZQb3VYI5bbbqdy0ctUv/VPolJS6KuvJyFhrCQPEZJ8TSLhgMd7a1yb1notgFIqLWCRCZ90tmyhdOWT2KLiGT/zcqLj0q0OaURr/24NpQ8+RF9tHVnHHcPoC+dji4+3OiwhLONrEvkv8DcgF/PmVHgTSnOA4hI+aG/awOZVzxAdm0bJzMuJikm2OqQRr/qNN8EwmHz7raRMlVlvQviaRC4EbgA0cJd32STg/gDEJHzQWreasu9eJCYhm5KZlxIZJeXDA6Xlm+XEFRYQM2oUxddfR0RsDBHR0VaHJcSQ4FMS0Vo3Ar/eadkSYEkgghK711T9NVvXvkp8ShHF+1+MLTLW6pBGJGd7O1sef4qmf/+H7BOPZ9yVlxOVIq09IfrzKYkopWzAb4ELgDzMOlrPAXdprZ2BC0/srKHiCyo3vEliWgnjpl9IhC3K6pBGHMMwaPrPF2x57AncPT0UnHs2+f93utVhCTEk+dqddTdwCPAzYCtQBNwMpAC/DExoYme1Wz6hpvRdkjMnM3bq+XI3wgCpe/d9tjzyGAklJRRfdzXxRVKUQYhd8TWJnAXsr7Vu8v681nujqlVIEgk4wzCo3vQu9eWfkpazP6Mnn01YuJTT8CfD48HZ0UlUSjKZRxwGhkH2CcdJ2RIhBuFrEokAPDst8+DjxYpi7xmGh8r1b9JY9SUZ+XMonHi63EzKz3prayl94CFcnZ3bCybmnHyi1WEJMSz4mkReA95WSt0CVGB2Zy3wLhcBYnjclK99hZbaFWSNPoK8kpPlgjY/Mtxuav75DhUvLCLMZmP0RfMJs8ntgoXYE77+xdwA3IJZ2TcXc2D9JeC2AMUV8jweF2WrX6CtYQ25xSeQPeYoSSB+5GhpZf2dd9G1qZTU2bMYd9XlRKfLhZpC7Clfp/jagZu8/0SAuV0Otnz7DB3NG8lXPyar6DCrQxpxbEmJ2OLjGf/Ln5Nx2CGSoIXYS4PdY70Es/UxBVgBXKy1rtibHSmlxgPPAOmYV7rP11pv2sW6ClgJLNRa/2pv9jdcuZ29lK58iq62coom/4SMvAOsDmnE6Ny4iYoXFqFu+AW2hAQm37bA6pCEGPYGG6F9ALPr6kKgCbP0yd56GHhQaz0eeBB4ZKCVlFIR3ufe3Id9DUsuRzcbv3mErvatjJl6viQQPzEcDsqefJrVN95ET2UlffUNVockxIgxWHfWTKBAa92rlPoU2LA3O1FKjQJmAMd6Fy0CHlBKZXqvhu/vN5hXwid4/4UER187m5Y/hr23meLpF5KcOdHqkEaEttXf4XjkcWpa28g+4TiKfnoBtrg4q8MSYsQYLIlEaa17AbTWnUqpva2vUQBUa63d3m25lVI13uXbk4hSahpwPPAj4Pd7s6M1a9bsZYgWcndBx6fgsUPSYZRW9EDF8n3e7PLl+76N4c7x4ssQFkbU/PNpG11E2/r1VodkOflc7CDHYt8NlkSilVL9O45jd/oZrfUf/BGIUioSeBS4yJtk9mo7U6ZMIXoYFcdz9LWz4av78YR7KJl9FfHJ/rk6evny5cycOdMv2xpumr/6mvjRhcRkZeEsLubb9euZNWeO1WENCaH8udiZHAuT3W7fp5PvwZLIK0BJv59f2+lnw8f9VAJ5SqkIb4KIwJwqXNlvnRxgHLDUm0BSgDClVJLW+nIf9zOsGB43W1Y/j9vVizrgGuISc60OaVhztLVT9tgTNH3+BdknnsC4Ky8jMjmZsEgpDyNEoOw2iWitL/DHTrTWDUqpVcC5wPPe/1f2Hw/xzvrK2PazUupWIGEkz86q2vQO3W3ljNnvfEkg+8AwDBo/+w9ljz+Ju7eXwvPPJe/006wOS4iQEMzLc68EnvF2h7UC8wGUUkuBBVrrb4IYi+Va61bTsPU/ZBYcQlrOdKvDGdbqlr7HlkcfJ1GNp/jaq4krLLA6JCFCRtCSiNZ6A3DgAMtP2sX6twY6Jqv0dTdSvvYV4pMLyVenWB3OsGQWTOwgKiWFzCMPh/Awso87VgomChFkUigoyNwuB5u/fZaw8AjGTp1HeLj8CvZUb00NpQ8+/P2CiSeeYHVYQoQk+QYLIsMwqFj/On1d9ZTMuISo2FSrQxpWDLeb6rf+SeWilwmLtDHm4gulYKIQFvP5L1Ap9SPgHCBLaz1XKTUDSNRafxaw6EaYpqpltNSuIGfcsSRl7N0U5lBlb25h/R/vonvzZtIOnM3YKy4nOj3N6rCECHm+3h73auBXwJOYiQTAAfwRODQwoY0s3e2VVG54i6T08eSMPcbqcIadyOQkIpMSUTf8gvRDDpaCiUIMEb7e3eiXwDFa6zvYcXOq9YDU5vCBy9nDlm+fwxadyJj9zpObSvmoY4Nmze9vxdXVRbjNxuRbf0/GoVJxV4ihxNfurETMe6vDjgsMbZitEbEbhuGh7LtFOO0dqAOuxhYVb3VIQ567r4+tz79I7ZKlRGek09fQSEJCyJRRE2JY8TWJfI7ZnXV3v2XXADIeMoi6sk/paNpAwYS5fitpMpK1rfqW0gcfxt7QQPZJJ1B0wTxscXtbsk0IEWi+JpHrgCVKqcuARKXUWsxWyIDXeAhTR/MmakrfJzV7OpkFB1sdzrBQs+Qdwmw2ptx5O8mTJ1kdjhBiEL7e2bDaOxvrYKAQs+bVl9uq8oofcvS1U7b6BWLiMymadKb04+9G87KviB8zmpisLEquv5bw6GgihlERTSFCmc9TfLXWBvCF95/YDbOw4nN4PE7GTptPhE2+EAfiaGtjy6OP0/zFl2SfdALjrriMyKQkq8MSQuwBX6f4lrGLir1a67F+jWgEqNr4Dt1t5t0JYxOyrA5nyDEMg8ZPP6Psiadw9/VROO88KZgoxDDla0vk0p1+zsEcJ1nk33CGv9a6b2mo+A+ZhYeQli2FFQdSt/Rdtjz6BIkTFMXXXU1cfr7VIQkh9pKvYyIf77xMKfUxsJR9u+/6iNLX3UD52lfNworjpbBif4bHg7Otnai0VDJ/dCRhETayjj1aCiYKMcztS+GhXkC6srzcLgebVz1LeLiNsdMukMKK/fRUVVP6wELc3d1M+8s92OLiyD7hOKvDEkL4ga9jIgt2WhQHnAx84PeIhqHthRW7GyiZeSlRMSlWhzQkeFwuat58m4qXXiEiOpoxl0jBRCFGGl//okt2+rkbeBB42q/RDFM7CiseR1L6eKvDGRLszS2sv+NOureUkX7QHMZecSlRqVK1WIiRZtAk4r0f+ofAK1rrvsCHNLzsKKyoyBl7tNXhDBmRyUlEpaaSf+P/kXHwQVaHI4QIkEErAXovKLxfEsgPuRzdbPn2OSKjExmz37khX1ixY/0Gvvvdgu0FEyct+J0kECFGOF+/9d5RSkmJk34Mw0PZmpdw2jsYO+2CkC6s6O7tZcujT/Ddb2/G3tBAX0Oj1SEJIYLE1zGRcGCxUupzzJIn2y881FpfHIjAhrq6sk+8hRVPD+nCiq0rV7F54cPYG5vIOflEiuadR0SsFEwUIlT4mkQ2AfcEMpDhpKN5IzWlH5CWvT+ZBaHdXVP7zlLCo6LY7093kDRxgtXhCCGCbLdJRCl1rtZ6kdb698EKaKhz9LVRtvpFYuJHURiihRWb/vslCWPHEJOdTcn11xIRE0N4VJTVYQkhLDDYmMgjQYlimPB4XGz59nk8Hhfjps8nwhZaX5yOllY23PVn9N33Uv3WPwGITEqSBCJECBusOyv0TrN3o3rjO3S3b2XM1HnExI+yOpygMQyDho8/pezJp/E4HBTNn0fe3B9bHZYQYggYLIlEKKV+xG6Sidb6E/+GNDS11H1LQ8XnjCo8lLTsaVaHE1S177xL2WNPkDRpIsXXXk1sXq7VIQkhhojBkkg08AS7TiIGIVA/q6+7ga1rXyU+uYi88SdbHU5QGG43jrZ2otPTGHXUkURERzHq6KMICw/ta2GEEN83WBLpDvX7hXy/sOK8kCis2FNZRekDC3F1dzP9r/dii4sj69hjrA5LCDEEjfxvxH1gFlZ8LWQKK3pcLqoXv0nly68SERvDmEsukoKJQojdkoH13eho3khL7Upyxh074gsr2pubWX/7nXSXlZN+yMGMvfwSolJGdtIUQuy73SYRrXVisAIZagzDoKb0faJiUsgec5TV4QRcVEoKURnpFJxzFulzDrQ6HCHEMCGjpLvQ0bSBno5KcsYeM2LHQdrXruW7396Ms7OTsIgIJt18kyQQIcQeGZnfjvtoeyskNo303FlWh+N3rp4etj77AnXvvkd01igczc1EJoZso1MIsQ8kiQygvXEtPZ3VjJ58NmHhI+se4K3LV1C68BEczc3k/vgUCs8/l4iYGKvDEkIMU5JEdmIYHmpKPyA6LoO0nP2tDsfvat99n4jYGKbefSeJamRPFhBCBF7QkohSajzwDJAONAPztdabdlrn98A5gBtwAjdprd8PVowAbfXf0dtVy+j9zh0RrRDDMGj+4r8kFI/bUTAxNobwyEirQxNCjADBHFh/GHhQaz0e8/7sAxV3/B8wW2s9FbgYeFkpFbSbUxiGh5rNHxITP4q07OnB2m3A2Jtb2PCnP6Pv+Qs1by8BIDIpURKIEMJvgtISUUqNAmYAx3oXLQIeUEplaq233wZvp1bHaszrVNKBqmDE2Vr3LX3d9YyZOm9Y3+rWMAxcK1ex8r6/YThdFP30AvJOO9XqsIQQI1CwurMKgGrv/drRWruVUjXe5bu6l+p8YLPWOigJxPC4qdn8IbEJ2aRm7ReMXQZM7ZKluP65lKQpkym+5kpic6VgohAiMIbkwLpS6gjgdna0XHy2Zs2avdupvQx6GiHhUFasWLl327CQ4fFAVzdhSYkY6anYfnwy9mlTWVdbC7W1VodnueXLl1sdwpAhx2IHORb7LlhJpBLIU0pFeFshEUCud/n3KKUOAp4HTtNa6z3d0ZQpU4iOjt6j1xgeN2u/+JDwxDwmzvnxsLtbYU9FBZvuX4i7p5fpf7uX8MhIlkdHM3PmTKtDGxKWL18ux8JLjsUOcixMdrt970++CdLAuta6AVgFnOtddC6wsv94CIBSajbwMnCm1npFMGIDaK5Zjr23mdxxxw2rBOJxOql46RVW/fwG+urqKTj7TCmYKIQIqmB+41wJPKOUWgC0Yo55oJRaCizQWn8DLARigUeUUtted4HW+rtABeXxuKjd8hFxSQUkZ04M1G78zt7czLrb7qBnawUZhx/K2EsvJjI52eqwhBAhJmhJRGu9AfhBYSat9Un9Hs8OVjzbNFd/jaOvlcJJZwyrVkhUSgoxWVkUzTuPtAOCftiEEAII8QKMHreT2i0fE59cRFK6GvwFFmv/bg2rf/M7nB1mwcSJv/uNJBAhhKVCugO9qfp/OO3tjJ5y9pBuhbi6uyl/5nnq3/+AmOwsHC3NRCZJwUQhhPVCNol43E7qyj4hIXUsiWnFVoezSy3fLGfzwodxtLaRO/fHFJ53DhF7OPtMCCECJWSTSGPVlzjtHYzZ77wh3Qqpe+8DbAkJTPjNr0kcX2J1OEII8T0hmUTcLgd1ZZ+SmFZMYto4q8P5HsMwaPrP5ySUFBObk0PJ/7uWiBgpmCiEGJpCcmC9sfK/uBxd5I47zupQvsfe1Mz6P/6Jjff9jdolSwGITJSCiUKIoSvkWiJuVx915Z+SlD6ehNQxVocDmCVL6j/4iPKnn8Vwuxl98YXknnLS4C8UQgiLhVwSaaj4Arezh9zi460OZbvad5ZS9vhTJO83hXHXXEVsTrbVIQkhhE9CKom4nb3Ul39GcsZE4pMLLY3FcLtxtLQSnZnBqKOPxhafQOaPjhjSg/xCCLGzkEoi9RX/we3qJbfY2rGQ7q0VlN7/IO7eXqb/7T5scbGMOupIS2MSQoi9ETJJxOXsoX7rf0gZNYW4pHxLYvA4nVS9tpiq1xZji49jzGWXSsFEIcSwFjLfYPVb/43H1UfOuD2+RYlf2JuaWXfb7fRUVJJ55OGMueQiIpOSLIlFCCH8JSSSiMvRTcPWz0nNmkpcYnDv8mcYBmFhYUSlphCTm0vRTy8gbZbcw0AIMTKExHUideWf4XE7yAnydSFt367muxtv2lEw8be/lgQihBhRRnxLxGnvorHic9KypxObkBWUfbq6uil/+lnqP/yImNwcHK2tUjBRhAyn00lVVRV9fX1Wh7JbNpuN9evXWx1G0MTExJCfn0+kny9eHvFJpLHyCzweFznjjgnK/pq/+h+bH3oUZ3s7eWfMpeCcs6RgoggpVVVVJCYmMnr06CE9Zb27u5v4+HirwwgKwzBobm6mqqqKMWP8e5H1iE4ihmHQUreKxLRiYuJHBWWfDR9/QmRyEhN/9xsSS4ZudWAhAqWvr2/IJ5BQExYWRnp6Oo2NjYOvvIdGdBLp66rD3tNEVtHhAduHYRg0fvYfElWJWTDx+msJj46WelcipEkCGXoC9TsZ0QPrrfWrgTBSRk0JyPbtjU2sv/1ONv3179sLJtoSEiSBCCFCxohuibTWryYhdSyR0f4d1DY8Hure/4CtzzyP4fEw5tKLyDnpRL/uQwjhP+3t7Rx22GGcddZZ3HzzzduX33///fT09HDjjTduX/b888+zZs0a7rrrLgDKysq499572bBhA8nJyURFRXHppZdyzDH+GWd98MEHeeONNwA4/fTTueaaa36wzooVK7jtttu2/9zc3ExmZub2161atYoFCxZgt9vJy8vjnnvuIT093S/xDWbEtkR6u+rp624gNWs/v2+7dslStjz8GAnjS9j//r+Se+ophEVE+H0/Qgj/WLJkCdOmTeOdd97B4XD4/LqGhgbmzZvHsccey8cff8zixYu5//776erq8ktcX3/9Ne+99x5LlixhyZIlvPfee3z99dc/WG/GjBm89dZb2/9NnTqVU045BQCPx8MNN9zAggULeP/995k1axb33nuvX+LzxYhNItu6svyVRAy3G7t3UCrr2KMp+fn1TL5tATFZwZk2LITYe6+//jpXX301Sik+/vhjn1/3wgsvcOCBBzJ37tztyzIzM7/3875YunQpc+fOJSYmhpiYGObOncvSpUt3+5rm5ma++OILTjvtNADWrFlDdHQ0s2bNAuCcc87hvffe80t8vhix3Vlt9atJSBlNZPS+lxbpLitn0/0P4unrY/rf/0JEbCyj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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title('RF Receiver Operating Characteristic')\n",
    "plt.plot(fpr, tpr, 'y', label = 'AUC = %0.2f' % roc_auc)\n",
    "plt.legend(loc = 'lower right')\n",
    "plt.plot([0, 1], [0, 1],'r--')\n",
    "plt.xlim([0, 1])\n",
    "plt.ylim([0, 1])\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, we use our model to categorize the data based off the probabilities from the previous step"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = rf.predict(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Precision measures true positives over true positives plus false positives."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6866096866096866"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "precision_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Recall measures true positives over true positives plus false negatives"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5585168018539977"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "recall_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The F1 score combines precision and recall using the harmonic mean."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6159744408945688"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f1_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Selecting the number of thresholds which correspond to the top right corner will result in the best combination of precision and recall."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5,1,'With log2, 2-class Precision-Recall curve: AP=0.60')"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "precision, recall, threshold = precision_recall_curve(y_test, y_pred)\n",
    "average_precision = average_precision_score(y_test, y_pred)\n",
    "step_kwargs = ({'step': 'post'} if 'step' in signature(plt.fill_between).parameters else {})\n",
    "plt.step(recall, precision, color='b', alpha=0.01, where='post')\n",
    "plt.fill_between(recall, precision, alpha=0.5, color='b', **step_kwargs)\n",
    "plt.xlabel('Recall')\n",
    "plt.ylabel('Precision')\n",
    "plt.ylim([0.0, 1.0])\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.title('With log2, 2-class Precision-Recall curve: AP={0:0.2f}'.format(average_precision))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compare Algorithms\n",
    "import pandas\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn import model_selection\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.svm import SVC\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    " #load dataset\n",
    "#url = \"https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv\"\n",
    "#names = ['preg', 'plas', 'pres', 'skin', 'test', 'mass', 'pedi', 'age', 'class']\n",
    "#dataframe = pandas.read_csv(url, names=names)\n",
    "#array = dataframe.values\n",
    "#X = array[:,0:8]\n",
    "#Y = array[:,8]\n",
    "# prepare configuration for cross validation test harness\n",
    "seed = 7\n",
    "# prepare models\n",
    "models = []\n",
    "models.append(('LR', LogisticRegression()))\n",
    "models.append(('LDA', LinearDiscriminantAnalysis()))\n",
    "models.append(('KNN', KNeighborsClassifier()))\n",
    "models.append(('CART', DecisionTreeClassifier()))\n",
    "models.append(('NB', GaussianNB()))\n",
    "models.append(('SVM', SVC()))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/amandam1/anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "/home/amandam1/anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "/home/amandam1/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:931: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/home/amandam1/anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "/home/amandam1/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:931: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/home/amandam1/anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "/home/amandam1/anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "/home/amandam1/anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "/home/amandam1/anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "/home/amandam1/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:931: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/home/amandam1/anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "/home/amandam1/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:931: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/home/amandam1/anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "/home/amandam1/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:931: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/home/amandam1/anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "/home/amandam1/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:931: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LR: 0.605632 (0.024462)\n",
      "LDA: 0.574923 (0.032337)\n",
      "KNN: 0.576422 (0.023258)\n",
      "CART: 0.572384 (0.021962)\n",
      "NB: 0.574244 (0.257674)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/amandam1/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:196: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "/home/amandam1/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:196: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "/home/amandam1/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:196: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "/home/amandam1/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:196: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "/home/amandam1/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:196: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "/home/amandam1/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:196: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "/home/amandam1/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:196: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "/home/amandam1/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:196: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "/home/amandam1/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:196: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "/home/amandam1/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:196: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVM: 0.607131 (0.059024)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# evaluate each model in turn\n",
    "results = []\n",
    "names = []\n",
    "scoring = 'accuracy'\n",
    "for name, model in models:\n",
    "\tkfold = model_selection.KFold(n_splits=10, random_state=seed)\n",
    "\tcv_results = model_selection.cross_val_score(model, X, y, cv=kfold, scoring=scoring)\n",
    "\tresults.append(cv_results)\n",
    "\tnames.append(name)\n",
    "\tmsg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n",
    "\tprint(msg)\n",
    "# boxplot algorithm comparison\n",
    "fig = plt.figure()\n",
    "fig.suptitle('Algorithm Comparison')\n",
    "ax = fig.add_subplot(111)\n",
    "plt.boxplot(results)\n",
    "ax.set_xticklabels(names)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The example also provides a box and whisker plot showing the spread of the accuracy scores across each cross validation fold for each algorithm."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/amandam1/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:246: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.00095319 0.00069793 0.00057895 ... 0.00165169 0.00138938 0.00142209]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "from sklearn.ensemble import ExtraTreesClassifier\n",
    "import matplotlib.pyplot as plt\n",
    "model = ExtraTreesClassifier()\n",
    "model.fit(X,y)\n",
    "print(model.feature_importances_) #use inbuilt class feature_importances of tree based classifiers\n",
    "#plot graph of feature importances for better visualization\n",
    "feat_importances = pd.Series(model.feature_importances_, index=X.columns)\n",
    "feat_importances.nlargest(10).plot(kind='barh')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
